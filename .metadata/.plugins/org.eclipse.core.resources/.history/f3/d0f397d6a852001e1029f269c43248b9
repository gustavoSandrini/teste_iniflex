package snippet;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

class Pessoa {
    private String nome;
    private LocalDate dataNascimento;

    public Pessoa(String nome, LocalDate dataNascimento) {
        this.nome = nome;
        this.dataNascimento = dataNascimento;
    }

    public String getNome() {
        return nome;
    }

    public LocalDate getDataNascimento() {
        return dataNascimento;
    }
}

class Funcionario extends Pessoa {
    private BigDecimal salario;
    private String funcao;

    public Funcionario(String nome, LocalDate dataNascimento, BigDecimal salario, String funcao) {
        super(nome, dataNascimento);
        this.salario = salario;
        this.funcao = funcao;
    }

    public BigDecimal getSalario() {
        return salario;
    }

    public String getFuncao() {
        return funcao;
    }

    public void setSalario(BigDecimal add) {
    }
}

public class Principal {
    public static void main(String[] args) {
        List<Funcionario> funcionarios = new ArrayList<>();

        // 3.1 - Inserir todos os funcionários
        funcionarios.add(new Funcionario("João", LocalDate.of(1990, Month.APRIL, 15), new BigDecimal("2500.50"), "Analista"));
        funcionarios.add(new Funcionario("Maria", LocalDate.of(1985, Month.JANUARY, 5), new BigDecimal("3200.75"), "Gerente"));
        funcionarios.add(new Funcionario("Pedro", LocalDate.of(1995, Month.JULY, 20), new BigDecimal("1800.30"), "Analista"));
        funcionarios.add(new Funcionario("Ana", LocalDate.of(1988, Month.DECEMBER, 10), new BigDecimal("2800.60"), "Analista"));

        // 3.2 - Remover o funcionário "João" da lista
        funcionarios.removeIf(funcionario -> funcionario.getNome().equals("João"));

        // 3.3 - Imprimir todos os funcionários
        funcionarios.forEach(funcionario -> {
            System.out.println("Nome: " + funcionario.getNome());
            System.out.println("Data de Nascimento: " + funcionario.getDataNascimento().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
            System.out.println("Salário: " + funcionario.getSalario().toString().replace(".", ","));
            System.out.println("Função: " + funcionario.getFuncao());
            System.out.println();
        });

        // 3.4 - Aumentar salários em 10%
        funcionarios.forEach(funcionario -> {
            BigDecimal aumento = funcionario.getSalario().multiply(new BigDecimal("0.10"));
            funcionario.setSalario(funcionario.getSalario().add(aumento));
        });

        // 3.5 - Agrupar os funcionários por função em um MAP
        Map<String, List<Funcionario>> funcionariosPorFuncao = funcionarios.stream()
                .collect(Collectors.groupingBy(Funcionario::getFuncao));

        // 3.6 - Imprimir os funcionários agrupados por função
        funcionariosPorFuncao.forEach((funcao, lista) -> {
            System.out.println("Função: " + funcao);
            lista.forEach(funcionario -> {
                System.out.println("Nome: " + funcionario.getNome());
                System.out.println("Salário: " + funcionario.getSalario().toString().replace(".", ","));
            });
            System.out.println();
        });

        funcionarios.stream()
            .filter(funcionario -> funcionario.getDataNascimento().getMonthValue() == 10 || funcionario.getDataNascimento().getMonthValue() == 12)
            .forEach(funcionario -> {
                System.out.println("Nome: " + funcionario.getNome());
                System.out.println("Data de Nascimento: " + funcionario.getDataNascimento().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                System.out.println();
            });

        // 3.9 - Imprimir o funcionário com a maior idade
        LocalDate dataMaisAntiga = LocalDate.now().minusYears(100); // Definindo uma data muito antiga
        Funcionario maisVelho = null;

        for (Funcionario funcionario : funcionarios) {
            if (funcionario.getDataNascimento().isBefore(dataMaisAntiga)) {
                dataMaisAntiga = funcionario.getDataNascimento();
                maisVelho = funcionario;
            }
        }

        if (maisVelho != null) {
            Period idade = Period.between(maisVelho.getDataNascimento(), LocalDate.now());
            System.out.println("Funcionário mais velho:");
            System.out.println("Nome: " + maisVelho.getNome());
            System.out.println("Idade: " + idade.getYears() + " anos");
        }

        // 3.10 - Imprimir a lista de funcionários por ordem alfabética
        funcionarios.sort(Comparator.comparing(Funcionario::getNome));
        System.out.println("Funcionários em ordem alfabética:");
        funcionarios.forEach(funcionario -> System.out.println(funcionario.getNome()));

        // 3.11 - Imprimir o total dos salários dos funcionários
        BigDecimal totalSalarios = funcionarios.stream()
                .map(Funcionario::getSalario)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        System.out.println("Total dos salários: " + totalSalarios.toString().replace(".", ","));

        // 3.12 - Imprimir quantos salários mínimos ganha cada funcionário
        BigDecimal salarioMinimo = new BigDecimal("1212.00");
        System.out.println("Salários em múltiplos de salário mínimo:");
        funcionarios.forEach(funcionario -> {
            BigDecimal multiplicador = funcionario.getSalario().divide(salarioMinimo, 2, RoundingMode.DOWN);
            System.out.println(funcionario.getNome() + ": " + multiplicador + " salários mínimos");
        });
    }
}
